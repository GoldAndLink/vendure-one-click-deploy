{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Optional, Inject } from '@angular/core';\nimport { TranslateCompiler } from '@ngx-translate/core';\nimport MessageFormat from '@messageformat/core';\nconst MESSAGE_FORMAT_CONFIG = new InjectionToken(\"MESSAGE_FORMAT_CONFIG\");\nconst defaultConfig = {\n  biDiSupport: false,\n  formatters: {},\n  strictNumberSign: false,\n  currency: \"USD\",\n  strictPluralKeys: true\n};\n\n/**\n * This compiler expects ICU syntax and compiles the expressions with messageformat.js\n */\nclass TranslateMessageFormatCompiler extends TranslateCompiler {\n  constructor(config) {\n    super();\n    this.mfCache = new Map();\n    const {\n      formatters: customFormatters,\n      biDiSupport,\n      strictNumberSign: strict,\n      currency,\n      strictPluralKeys\n    } = {\n      ...defaultConfig,\n      ...config\n    };\n    this.config = {\n      customFormatters,\n      biDiSupport,\n      strict,\n      currency,\n      strictPluralKeys\n    };\n  }\n  compile(value, lang) {\n    return this.getMessageFormatInstance(lang).compile(value);\n  }\n  compileTranslations(translations, lang) {\n    if (typeof translations === \"string\") {\n      return this.compile(translations, lang);\n    }\n    return Object.keys(translations).reduce((acc, key) => {\n      const value = translations[key];\n      acc[key] = this.compileTranslations(value, lang);\n      return acc;\n    }, {});\n  }\n  getMessageFormatInstance(locale) {\n    if (!this.mfCache.has(locale)) {\n      this.mfCache.set(locale, new MessageFormat(locale, this.config));\n    }\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return this.mfCache.get(locale);\n  }\n  static {\n    this.ɵfac = function TranslateMessageFormatCompiler_Factory(t) {\n      return new (t || TranslateMessageFormatCompiler)(i0.ɵɵinject(MESSAGE_FORMAT_CONFIG, 8));\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: TranslateMessageFormatCompiler,\n      factory: TranslateMessageFormatCompiler.ɵfac\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TranslateMessageFormatCompiler, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [MESSAGE_FORMAT_CONFIG]\n      }]\n    }];\n  }, null);\n})();\n\n/* eslint-disable-next-line  no-console */\nconst log = (...message) => console.log(tag, ...message);\nconst tag = \"[TranslateMessageFormatCompiler]\";\nclass TranslateMessageFormatDebugCompiler extends TranslateMessageFormatCompiler {\n  compile(value, lang) {\n    log(`COMPILE (${lang})`, value);\n    const interpolationFn = super.compile(value, lang);\n    return this.wrap(interpolationFn, value);\n  }\n  compileTranslations(value, lang) {\n    log(`COMPILE (${lang})`, value);\n    return super.compileTranslations(value, lang);\n  }\n  wrap(fn, reference) {\n    return params => {\n      log(\"INTERPOLATE\", reference, params);\n      return fn(params);\n    };\n  }\n  static {\n    this.ɵfac = /* @__PURE__ */(() => {\n      let ɵTranslateMessageFormatDebugCompiler_BaseFactory;\n      return function TranslateMessageFormatDebugCompiler_Factory(t) {\n        return (ɵTranslateMessageFormatDebugCompiler_BaseFactory || (ɵTranslateMessageFormatDebugCompiler_BaseFactory = i0.ɵɵgetInheritedFactory(TranslateMessageFormatDebugCompiler)))(t || TranslateMessageFormatDebugCompiler);\n      };\n    })();\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: TranslateMessageFormatDebugCompiler,\n      factory: TranslateMessageFormatDebugCompiler.ɵfac\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TranslateMessageFormatDebugCompiler, [{\n    type: Injectable\n  }], null, null);\n})();\n\n/*\n * Public API Surface of ngx-translate-messageformat-compiler\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MESSAGE_FORMAT_CONFIG, TranslateMessageFormatCompiler, TranslateMessageFormatDebugCompiler, defaultConfig };","map":{"version":3,"names":["i0","InjectionToken","Injectable","Optional","Inject","TranslateCompiler","MessageFormat","MESSAGE_FORMAT_CONFIG","defaultConfig","biDiSupport","formatters","strictNumberSign","currency","strictPluralKeys","TranslateMessageFormatCompiler","constructor","config","mfCache","Map","customFormatters","strict","compile","value","lang","getMessageFormatInstance","compileTranslations","translations","Object","keys","reduce","acc","key","locale","has","set","get","ɵfac","TranslateMessageFormatCompiler_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","ngDevMode","ɵsetClassMetadata","type","undefined","decorators","args","log","message","console","tag","TranslateMessageFormatDebugCompiler","interpolationFn","wrap","fn","reference","params","ɵTranslateMessageFormatDebugCompiler_BaseFactory","TranslateMessageFormatDebugCompiler_Factory","ɵɵgetInheritedFactory"],"sources":["/Users/peluche/Documents/NoursStuffs/CerisePeyi/dev/2k24/last/vendure-one-click-deploy/node_modules/ngx-translate-messageformat-compiler/fesm2022/ngx-translate-messageformat-compiler.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, Injectable, Optional, Inject } from '@angular/core';\nimport { TranslateCompiler } from '@ngx-translate/core';\nimport MessageFormat from '@messageformat/core';\n\nconst MESSAGE_FORMAT_CONFIG = new InjectionToken(\"MESSAGE_FORMAT_CONFIG\");\nconst defaultConfig = {\n    biDiSupport: false,\n    formatters: {},\n    strictNumberSign: false,\n    currency: \"USD\",\n    strictPluralKeys: true,\n};\n\n/**\n * This compiler expects ICU syntax and compiles the expressions with messageformat.js\n */\nclass TranslateMessageFormatCompiler extends TranslateCompiler {\n    constructor(config) {\n        super();\n        this.mfCache = new Map();\n        const { formatters: customFormatters, biDiSupport, strictNumberSign: strict, currency, strictPluralKeys, } = {\n            ...defaultConfig,\n            ...config,\n        };\n        this.config = {\n            customFormatters,\n            biDiSupport,\n            strict,\n            currency,\n            strictPluralKeys,\n        };\n    }\n    compile(value, lang) {\n        return this.getMessageFormatInstance(lang).compile(value);\n    }\n    compileTranslations(translations, lang) {\n        if (typeof translations === \"string\") {\n            return this.compile(translations, lang);\n        }\n        return Object.keys(translations).reduce((acc, key) => {\n            const value = translations[key];\n            acc[key] = this.compileTranslations(value, lang);\n            return acc;\n        }, {});\n    }\n    getMessageFormatInstance(locale) {\n        if (!this.mfCache.has(locale)) {\n            this.mfCache.set(locale, new MessageFormat(locale, this.config));\n        }\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return this.mfCache.get(locale);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslateMessageFormatCompiler, deps: [{ token: MESSAGE_FORMAT_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslateMessageFormatCompiler }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslateMessageFormatCompiler, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [MESSAGE_FORMAT_CONFIG]\n                }] }]; } });\n\n/* eslint-disable-next-line  no-console */\nconst log = (...message) => console.log(tag, ...message);\nconst tag = \"[TranslateMessageFormatCompiler]\";\nclass TranslateMessageFormatDebugCompiler extends TranslateMessageFormatCompiler {\n    compile(value, lang) {\n        log(`COMPILE (${lang})`, value);\n        const interpolationFn = super.compile(value, lang);\n        return this.wrap(interpolationFn, value);\n    }\n    compileTranslations(value, lang) {\n        log(`COMPILE (${lang})`, value);\n        return super.compileTranslations(value, lang);\n    }\n    wrap(fn, reference) {\n        return (params) => {\n            log(\"INTERPOLATE\", reference, params);\n            return fn(params);\n        };\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslateMessageFormatDebugCompiler, deps: null, target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslateMessageFormatDebugCompiler }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.0.0\", ngImport: i0, type: TranslateMessageFormatDebugCompiler, decorators: [{\n            type: Injectable\n        }] });\n\n/*\n * Public API Surface of ngx-translate-messageformat-compiler\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MESSAGE_FORMAT_CONFIG, TranslateMessageFormatCompiler, TranslateMessageFormatDebugCompiler, defaultConfig };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}