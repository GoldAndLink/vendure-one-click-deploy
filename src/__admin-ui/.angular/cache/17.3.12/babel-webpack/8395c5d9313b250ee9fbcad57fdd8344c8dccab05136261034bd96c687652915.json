{"ast":null,"code":"import _asyncToGenerator from \"/Users/peluche/Documents/NoursStuffs/CerisePeyi/dev/2k24/last/vendure-one-click-deploy/node_modules/@angular-devkit/build-angular/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { addActionBarDropdownMenuItem, addNavMenuItem, DataService, getServerLocation, LocalStorageService, ModalService, NotificationService, registerBulkAction } from '@vendure/admin-ui/core';\nimport { firstValueFrom } from 'rxjs';\nimport { downloadBlob, getHeaders } from './helpers';\nimport { getTemplateNames } from './queries.graphql';\nfunction getEnabledTemplates(_x) {\n  return _getEnabledTemplates.apply(this, arguments);\n}\n/**\n * Show dialog with templates, and return the user selected templateID\n */\nfunction _getEnabledTemplates() {\n  _getEnabledTemplates = _asyncToGenerator(function* (dataService) {\n    const templateNames = yield firstValueFrom(dataService.query(getTemplateNames).mapStream(d => d.pdfTemplates.items));\n    return templateNames.filter(t => t.enabled);\n  });\n  return _getEnabledTemplates.apply(this, arguments);\n}\nfunction promptTemplateSelection(_x2, _x3, _x4) {\n  return _promptTemplateSelection.apply(this, arguments);\n}\n/**\n * Download the actual PDF files or ZIP file if multiple orders\n */\nfunction _promptTemplateSelection() {\n  _promptTemplateSelection = _asyncToGenerator(function* (modalService, templates, nrOfOrders) {\n    return yield firstValueFrom(modalService.dialog({\n      title: `Select a PDF template`,\n      body: `You are about to download PDF files for ${nrOfOrders} order(s). Please select a template to use.`,\n      size: 'xl',\n      buttons: [{\n        type: 'secondary',\n        label: 'cancel',\n        returnValue: null\n      },\n      // Render all templates as buttons\n      ...templates.map(t => ({\n        type: 'primary',\n        label: t.name,\n        returnValue: t.id\n      }))]\n    }));\n  });\n  return _promptTemplateSelection.apply(this, arguments);\n}\nfunction startDownload(_x5, _x6, _x7, _x8) {\n  return _startDownload.apply(this, arguments);\n}\nfunction _startDownload() {\n  _startDownload = _asyncToGenerator(function* (notificationService, localStorageService, templateId, orderCodes) {\n    notificationService.info('Starting download...');\n    const serverPath = getServerLocation();\n    const res = yield fetch(`${serverPath}/order-pdf/download/${templateId}?orderCodes=${orderCodes.join(',')}`, {\n      headers: getHeaders(localStorageService),\n      method: 'GET'\n    });\n    if (!res.ok) {\n      const json = yield res.json();\n      throw Error(json?.message);\n    }\n    yield new Promise(resolve => setTimeout(resolve, 5000));\n    const blob = yield res.blob();\n    const fileName = orderCodes.length > 1 ? `orders.zip` : 'order.pdf';\n    yield downloadBlob(blob, fileName, true);\n  });\n  return _startDownload.apply(this, arguments);\n}\nexport default [addNavMenuItem({\n  id: 'pdf-templates',\n  label: 'PDF Templates',\n  routerLink: ['/extensions/pdf-templates'],\n  requiresPermission: 'AllowPDFDownload',\n  icon: 'printer'\n}, 'settings'), addActionBarDropdownMenuItem({\n  id: 'print-invoice',\n  locationId: 'order-detail',\n  label: 'Download PDF',\n  icon: 'printer',\n  requiresPermission: 'AllowPDFDownload',\n  hasDivider: true,\n  onClick: function () {\n    var _ref = _asyncToGenerator(function* (event, context) {\n      const order = yield firstValueFrom(context.entity$);\n      const templateNames = yield getEnabledTemplates(context.dataService);\n      // Prompt template selection\n      const modalService = context.injector.get(ModalService);\n      const selectedTemplateId = yield promptTemplateSelection(modalService, templateNames, 1);\n      if (!selectedTemplateId) {\n        return;\n      }\n      // Download the actual PDFs\n      const localStorageService = context.injector.get(LocalStorageService);\n      const notificationService = context.injector.get(NotificationService);\n      const orderCode = order?.code;\n      console.log('asdfasdfasd', orderCode);\n      yield startDownload(notificationService, localStorageService, selectedTemplateId, [orderCode]).catch(e => {\n        notificationService.error(e?.message);\n      });\n    });\n    return function onClick(_x9, _x10) {\n      return _ref.apply(this, arguments);\n    };\n  }()\n}), registerBulkAction({\n  location: 'order-list',\n  label: 'Download PDF',\n  icon: 'printer',\n  requiresPermission: 'AllowPDFDownload',\n  onClick: function () {\n    var _ref2 = _asyncToGenerator(function* ({\n      injector,\n      selection\n    }) {\n      const dataService = injector.get(DataService);\n      const templateNames = yield getEnabledTemplates(dataService);\n      // Prompt template selection\n      const modalService = injector.get(ModalService);\n      const selectedTemplateId = yield promptTemplateSelection(modalService, templateNames, selection.length);\n      if (!selectedTemplateId) {\n        return;\n      }\n      // Download the actual PDFs\n      const localStorageService = injector.get(LocalStorageService);\n      const notificationService = injector.get(NotificationService);\n      const orderCodes = selection.map(s => s.code);\n      yield startDownload(notificationService, localStorageService, selectedTemplateId, orderCodes).catch(e => {\n        notificationService.error(e?.message);\n      });\n    });\n    return function onClick(_x11) {\n      return _ref2.apply(this, arguments);\n    };\n  }()\n})];","map":{"version":3,"names":["addActionBarDropdownMenuItem","addNavMenuItem","DataService","getServerLocation","LocalStorageService","ModalService","NotificationService","registerBulkAction","firstValueFrom","downloadBlob","getHeaders","getTemplateNames","getEnabledTemplates","_x","_getEnabledTemplates","apply","arguments","_asyncToGenerator","dataService","templateNames","query","mapStream","d","pdfTemplates","items","filter","t","enabled","promptTemplateSelection","_x2","_x3","_x4","_promptTemplateSelection","modalService","templates","nrOfOrders","dialog","title","body","size","buttons","type","label","returnValue","map","name","id","startDownload","_x5","_x6","_x7","_x8","_startDownload","notificationService","localStorageService","templateId","orderCodes","info","serverPath","res","fetch","join","headers","method","ok","json","Error","message","Promise","resolve","setTimeout","blob","fileName","length","routerLink","requiresPermission","icon","locationId","hasDivider","onClick","_ref","event","context","order","entity$","injector","get","selectedTemplateId","orderCode","code","console","log","catch","e","error","_x9","_x10","location","_ref2","selection","s","_x11"],"sources":["/Users/peluche/Documents/NoursStuffs/CerisePeyi/dev/2k24/last/vendure-one-click-deploy/src/__admin-ui/src/extensions/92aa7eafa53fed03241b9e8420384d94fa519ad8f9643a1003d2e69c3a17d771/providers.ts"],"sourcesContent":["import {\n  addActionBarDropdownMenuItem,\n  addNavMenuItem,\n  DataService,\n  getServerLocation,\n  LocalStorageService,\n  ModalService,\n  NotificationService,\n  registerBulkAction,\n} from '@vendure/admin-ui/core';\nimport { firstValueFrom, lastValueFrom } from 'rxjs';\nimport { PdfTemplate, PdfTemplateNamesQuery } from './generated/graphql';\nimport { downloadBlob, getHeaders } from './helpers';\nimport { getTemplateNames } from './queries.graphql';\nimport { ID } from '@vendure/core';\n\nasync function getEnabledTemplates(dataService: DataService) {\n  const templateNames = await firstValueFrom(\n    dataService\n      .query<PdfTemplateNamesQuery>(getTemplateNames)\n      .mapStream((d) => d.pdfTemplates.items)\n  );\n  return templateNames.filter((t) => t.enabled);\n}\n\n/**\n * Show dialog with templates, and return the user selected templateID\n */\nasync function promptTemplateSelection(\n  modalService: ModalService,\n  templates: Array<Pick<PdfTemplate, 'name' | 'id'>>,\n  nrOfOrders: number\n) {\n  return await firstValueFrom(\n    modalService.dialog({\n      title: `Select a PDF template`,\n      body: `You are about to download PDF files for ${nrOfOrders} order(s). Please select a template to use.`,\n      size: 'xl',\n      buttons: [\n        { type: 'secondary', label: 'cancel', returnValue: null },\n        // Render all templates as buttons\n        ...templates.map((t) => ({\n          type: 'primary' as const,\n          label: t.name,\n          returnValue: t.id,\n        })),\n      ],\n    })\n  );\n}\n\n/**\n * Download the actual PDF files or ZIP file if multiple orders\n */\nasync function startDownload(\n  notificationService: NotificationService,\n  localStorageService: LocalStorageService,\n  templateId: ID,\n  orderCodes: string[]\n) {\n  notificationService.info('Starting download...');\n  const serverPath = getServerLocation();\n  const res = await fetch(\n    `${serverPath}/order-pdf/download/${templateId}?orderCodes=${orderCodes.join(\n      ','\n    )}`,\n    {\n      headers: getHeaders(localStorageService),\n      method: 'GET',\n    }\n  );\n  if (!res.ok) {\n    const json = await res.json();\n    throw Error(json?.message);\n  }\n  await new Promise((resolve) => setTimeout(resolve, 5000));\n  const blob = await res.blob();\n  const fileName = orderCodes.length > 1 ? `orders.zip` : 'order.pdf';\n  await downloadBlob(blob, fileName, true);\n}\n\nexport default [\n  addNavMenuItem(\n    {\n      id: 'pdf-templates',\n      label: 'PDF Templates',\n      routerLink: ['/extensions/pdf-templates'],\n      requiresPermission: 'AllowPDFDownload',\n      icon: 'printer',\n    },\n    'settings'\n  ),\n  addActionBarDropdownMenuItem({\n    id: 'print-invoice',\n    locationId: 'order-detail',\n    label: 'Download PDF',\n    icon: 'printer',\n    requiresPermission: 'AllowPDFDownload',\n    hasDivider: true,\n    onClick: async (event, context) => {\n      const order = await firstValueFrom(context.entity$);\n      const templateNames = await getEnabledTemplates(context.dataService);\n      // Prompt template selection\n      const modalService = context.injector.get(ModalService);\n      const selectedTemplateId = await promptTemplateSelection(\n        modalService,\n        templateNames,\n        1\n      );\n      if (!selectedTemplateId) {\n        return;\n      }\n      // Download the actual PDFs\n      const localStorageService = context.injector.get(LocalStorageService);\n      const notificationService = context.injector.get(NotificationService);\n      const orderCode = order?.code;\n      console.log('asdfasdfasd', orderCode);\n      await startDownload(\n        notificationService,\n        localStorageService,\n        selectedTemplateId,\n        [orderCode]\n      ).catch((e) => {\n        notificationService.error(e?.message);\n      });\n    },\n  }),\n  registerBulkAction({\n    location: 'order-list',\n    label: 'Download PDF',\n    icon: 'printer',\n    requiresPermission: 'AllowPDFDownload',\n    onClick: async ({ injector, selection }) => {\n      const dataService = injector.get(DataService);\n      const templateNames = await getEnabledTemplates(dataService);\n      // Prompt template selection\n      const modalService = injector.get(ModalService);\n      const selectedTemplateId = await promptTemplateSelection(\n        modalService,\n        templateNames,\n        selection.length\n      );\n      if (!selectedTemplateId) {\n        return;\n      }\n      // Download the actual PDFs\n      const localStorageService = injector.get(LocalStorageService);\n      const notificationService = injector.get(NotificationService);\n      const orderCodes = selection.map((s) => s.code);\n      await startDownload(\n        notificationService,\n        localStorageService,\n        selectedTemplateId,\n        orderCodes\n      ).catch((e) => {\n        notificationService.error(e?.message);\n      });\n    },\n  }),\n];\n"],"mappings":";AAAA,SACEA,4BAA4B,EAC5BC,cAAc,EACdC,WAAW,EACXC,iBAAiB,EACjBC,mBAAmB,EACnBC,YAAY,EACZC,mBAAmB,EACnBC,kBAAkB,QACb,wBAAwB;AAC/B,SAASC,cAAc,QAAuB,MAAM;AAEpD,SAASC,YAAY,EAAEC,UAAU,QAAQ,WAAW;AACpD,SAASC,gBAAgB,QAAQ,mBAAmB;AAAC,SAGtCC,mBAAmBA,CAAAC,EAAA;EAAA,OAAAC,oBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AASlC;;;AAAA,SAAAF,qBAAA;EAAAA,oBAAA,GAAAG,iBAAA,CATA,WAAmCC,WAAwB;IACzD,MAAMC,aAAa,SAASX,cAAc,CACxCU,WAAW,CACRE,KAAK,CAAwBT,gBAAgB,CAAC,CAC9CU,SAAS,CAAEC,CAAC,IAAKA,CAAC,CAACC,YAAY,CAACC,KAAK,CAAC,CAC1C;IACD,OAAOL,aAAa,CAACM,MAAM,CAAEC,CAAC,IAAKA,CAAC,CAACC,OAAO,CAAC;EAC/C,CAAC;EAAA,OAAAb,oBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAKcY,uBAAuBA,CAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA;EAAA,OAAAC,wBAAA,CAAAjB,KAAA,OAAAC,SAAA;AAAA;AAuBtC;;;AAAA,SAAAgB,yBAAA;EAAAA,wBAAA,GAAAf,iBAAA,CAvBA,WACEgB,YAA0B,EAC1BC,SAAkD,EAClDC,UAAkB;IAElB,aAAa3B,cAAc,CACzByB,YAAY,CAACG,MAAM,CAAC;MAClBC,KAAK,EAAE,uBAAuB;MAC9BC,IAAI,EAAE,2CAA2CH,UAAU,6CAA6C;MACxGI,IAAI,EAAE,IAAI;MACVC,OAAO,EAAE,CACP;QAAEC,IAAI,EAAE,WAAW;QAAEC,KAAK,EAAE,QAAQ;QAAEC,WAAW,EAAE;MAAI,CAAE;MACzD;MACA,GAAGT,SAAS,CAACU,GAAG,CAAElB,CAAC,KAAM;QACvBe,IAAI,EAAE,SAAkB;QACxBC,KAAK,EAAEhB,CAAC,CAACmB,IAAI;QACbF,WAAW,EAAEjB,CAAC,CAACoB;OAChB,CAAC,CAAC;KAEN,CAAC,CACH;EACH,CAAC;EAAA,OAAAd,wBAAA,CAAAjB,KAAA,OAAAC,SAAA;AAAA;AAAA,SAKc+B,aAAaA,CAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA,EAAAC,GAAA;EAAA,OAAAC,cAAA,CAAArC,KAAA,OAAAC,SAAA;AAAA;AAAA,SAAAoC,eAAA;EAAAA,cAAA,GAAAnC,iBAAA,CAA5B,WACEoC,mBAAwC,EACxCC,mBAAwC,EACxCC,UAAc,EACdC,UAAoB;IAEpBH,mBAAmB,CAACI,IAAI,CAAC,sBAAsB,CAAC;IAChD,MAAMC,UAAU,GAAGvD,iBAAiB,EAAE;IACtC,MAAMwD,GAAG,SAASC,KAAK,CACrB,GAAGF,UAAU,uBAAuBH,UAAU,eAAeC,UAAU,CAACK,IAAI,CAC1E,GAAG,CACJ,EAAE,EACH;MACEC,OAAO,EAAEpD,UAAU,CAAC4C,mBAAmB,CAAC;MACxCS,MAAM,EAAE;KACT,CACF;IACD,IAAI,CAACJ,GAAG,CAACK,EAAE,EAAE;MACX,MAAMC,IAAI,SAASN,GAAG,CAACM,IAAI,EAAE;MAC7B,MAAMC,KAAK,CAACD,IAAI,EAAEE,OAAO,CAAC;IAC5B;IACA,MAAM,IAAIC,OAAO,CAAEC,OAAO,IAAKC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;IACzD,MAAME,IAAI,SAASZ,GAAG,CAACY,IAAI,EAAE;IAC7B,MAAMC,QAAQ,GAAGhB,UAAU,CAACiB,MAAM,GAAG,CAAC,GAAG,YAAY,GAAG,WAAW;IACnE,MAAMhE,YAAY,CAAC8D,IAAI,EAAEC,QAAQ,EAAE,IAAI,CAAC;EAC1C,CAAC;EAAA,OAAApB,cAAA,CAAArC,KAAA,OAAAC,SAAA;AAAA;AAED,eAAe,CACbf,cAAc,CACZ;EACE6C,EAAE,EAAE,eAAe;EACnBJ,KAAK,EAAE,eAAe;EACtBgC,UAAU,EAAE,CAAC,2BAA2B,CAAC;EACzCC,kBAAkB,EAAE,kBAAkB;EACtCC,IAAI,EAAE;CACP,EACD,UAAU,CACX,EACD5E,4BAA4B,CAAC;EAC3B8C,EAAE,EAAE,eAAe;EACnB+B,UAAU,EAAE,cAAc;EAC1BnC,KAAK,EAAE,cAAc;EACrBkC,IAAI,EAAE,SAAS;EACfD,kBAAkB,EAAE,kBAAkB;EACtCG,UAAU,EAAE,IAAI;EAChBC,OAAO;IAAA,IAAAC,IAAA,GAAA/D,iBAAA,CAAE,WAAOgE,KAAK,EAAEC,OAAO,EAAI;MAChC,MAAMC,KAAK,SAAS3E,cAAc,CAAC0E,OAAO,CAACE,OAAO,CAAC;MACnD,MAAMjE,aAAa,SAASP,mBAAmB,CAACsE,OAAO,CAAChE,WAAW,CAAC;MACpE;MACA,MAAMe,YAAY,GAAGiD,OAAO,CAACG,QAAQ,CAACC,GAAG,CAACjF,YAAY,CAAC;MACvD,MAAMkF,kBAAkB,SAAS3D,uBAAuB,CACtDK,YAAY,EACZd,aAAa,EACb,CAAC,CACF;MACD,IAAI,CAACoE,kBAAkB,EAAE;QACvB;MACF;MACA;MACA,MAAMjC,mBAAmB,GAAG4B,OAAO,CAACG,QAAQ,CAACC,GAAG,CAAClF,mBAAmB,CAAC;MACrE,MAAMiD,mBAAmB,GAAG6B,OAAO,CAACG,QAAQ,CAACC,GAAG,CAAChF,mBAAmB,CAAC;MACrE,MAAMkF,SAAS,GAAGL,KAAK,EAAEM,IAAI;MAC7BC,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEH,SAAS,CAAC;MACrC,MAAMzC,aAAa,CACjBM,mBAAmB,EACnBC,mBAAmB,EACnBiC,kBAAkB,EAClB,CAACC,SAAS,CAAC,CACZ,CAACI,KAAK,CAAEC,CAAC,IAAI;QACZxC,mBAAmB,CAACyC,KAAK,CAACD,CAAC,EAAE1B,OAAO,CAAC;MACvC,CAAC,CAAC;IACJ,CAAC;IAAA,gBA1BDY,OAAOA,CAAAgB,GAAA,EAAAC,IAAA;MAAA,OAAAhB,IAAA,CAAAjE,KAAA,OAAAC,SAAA;IAAA;EAAA;CA2BR,CAAC,EACFT,kBAAkB,CAAC;EACjB0F,QAAQ,EAAE,YAAY;EACtBvD,KAAK,EAAE,cAAc;EACrBkC,IAAI,EAAE,SAAS;EACfD,kBAAkB,EAAE,kBAAkB;EACtCI,OAAO;IAAA,IAAAmB,KAAA,GAAAjF,iBAAA,CAAE,WAAO;MAAEoE,QAAQ;MAAEc;IAAS,CAAE,EAAI;MACzC,MAAMjF,WAAW,GAAGmE,QAAQ,CAACC,GAAG,CAACpF,WAAW,CAAC;MAC7C,MAAMiB,aAAa,SAASP,mBAAmB,CAACM,WAAW,CAAC;MAC5D;MACA,MAAMe,YAAY,GAAGoD,QAAQ,CAACC,GAAG,CAACjF,YAAY,CAAC;MAC/C,MAAMkF,kBAAkB,SAAS3D,uBAAuB,CACtDK,YAAY,EACZd,aAAa,EACbgF,SAAS,CAAC1B,MAAM,CACjB;MACD,IAAI,CAACc,kBAAkB,EAAE;QACvB;MACF;MACA;MACA,MAAMjC,mBAAmB,GAAG+B,QAAQ,CAACC,GAAG,CAAClF,mBAAmB,CAAC;MAC7D,MAAMiD,mBAAmB,GAAGgC,QAAQ,CAACC,GAAG,CAAChF,mBAAmB,CAAC;MAC7D,MAAMkD,UAAU,GAAG2C,SAAS,CAACvD,GAAG,CAAEwD,CAAC,IAAKA,CAAC,CAACX,IAAI,CAAC;MAC/C,MAAM1C,aAAa,CACjBM,mBAAmB,EACnBC,mBAAmB,EACnBiC,kBAAkB,EAClB/B,UAAU,CACX,CAACoC,KAAK,CAAEC,CAAC,IAAI;QACZxC,mBAAmB,CAACyC,KAAK,CAACD,CAAC,EAAE1B,OAAO,CAAC;MACvC,CAAC,CAAC;IACJ,CAAC;IAAA,gBAzBDY,OAAOA,CAAAsB,IAAA;MAAA,OAAAH,KAAA,CAAAnF,KAAA,OAAAC,SAAA;IAAA;EAAA;CA0BR,CAAC,CACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}