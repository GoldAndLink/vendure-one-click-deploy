{"ast":null,"code":"// @ts-check\n\nimport { ApolloLink } from \"@apollo/client/link/core/ApolloLink.js\";\nimport { createSignalIfSupported } from \"@apollo/client/link/http/createSignalIfSupported.js\";\nimport { parseAndCheckHttpResponse } from \"@apollo/client/link/http/parseAndCheckHttpResponse.js\";\nimport { rewriteURIForGET } from \"@apollo/client/link/http/rewriteURIForGET.js\";\nimport { defaultPrinter, fallbackHttpConfig, selectHttpOptionsAndBodyInternal } from \"@apollo/client/link/http/selectHttpOptionsAndBody.js\";\nimport { selectURI } from \"@apollo/client/link/http/selectURI.js\";\nimport { serializeFetchParameter } from \"@apollo/client/link/http/serializeFetchParameter.js\";\nimport { Observable } from \"@apollo/client/utilities/observables/Observable.js\";\nimport extractFiles from \"extract-files/extractFiles.mjs\";\nimport formDataAppendFile from \"./formDataAppendFile.mjs\";\nimport isExtractableFile from \"./isExtractableFile.mjs\";\n\n/**\n * Creates a\n * [terminating Apollo Link](https://www.apollographql.com/docs/react/api/link/introduction/#the-terminating-link)\n * for [Apollo Client](https://www.apollographql.com/docs/react) that fetches a\n * [GraphQL multipart request](https://github.com/jaydenseric/graphql-multipart-request-spec)\n * if the GraphQL variables contain files (by default\n * [`FileList`](https://developer.mozilla.org/en-US/docs/Web/API/FileList),\n * [`File`](https://developer.mozilla.org/en-US/docs/Web/API/File), or\n * [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob) instances),\n * or else fetches a regular\n * [GraphQL POST or GET request](https://www.apollographql.com/docs/apollo-server/workflow/requests)\n * (depending on the config and GraphQL operation).\n *\n * Some of the options are similar to the\n * [`createHttpLink` options](https://www.apollographql.com/docs/react/api/link/apollo-link-http/#httplink-constructor-options).\n * @see [GraphQL multipart request spec](https://github.com/jaydenseric/graphql-multipart-request-spec).\n * @param {object} options Options.\n * @param {Parameters<typeof selectURI>[1]} [options.uri] GraphQL endpoint URI.\n *   Defaults to `\"/graphql\"`.\n * @param {boolean} [options.useGETForQueries] Should GET be used to fetch\n *   queries, if there are no files to upload.\n * @param {ExtractableFileMatcher} [options.isExtractableFile] Matches\n *   extractable files in the GraphQL operation. Defaults to\n *   {@linkcode isExtractableFile}.\n * @param {typeof FormData} [options.FormData]\n *   [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData)\n *   class. Defaults to the {@linkcode FormData} global.\n * @param {FormDataFileAppender} [options.formDataAppendFile]\n *   Customizes how extracted files are appended to the\n *   [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData)\n *   instance. Defaults to {@linkcode formDataAppendFile}.\n * @param {import(\"@apollo/client/link/http/selectHttpOptionsAndBody.js\").Printer} [options.print]\n *   Prints the GraphQL query or mutation AST to a string for transport.\n *   Defaults to {@linkcode defaultPrinter}.\n * @param {typeof fetch} [options.fetch] [`fetch`](https://fetch.spec.whatwg.org)\n *   implementation. Defaults to the {@linkcode fetch} global.\n * @param {RequestInit} [options.fetchOptions] `fetch` options; overridden by\n *   upload requirements.\n * @param {string} [options.credentials] Overrides\n *   {@linkcode RequestInit.credentials credentials} in\n *   {@linkcode fetchOptions}.\n * @param {{ [headerName: string]: string }} [options.headers] Merges with and\n *   overrides {@linkcode RequestInit.headers headers} in\n *   {@linkcode fetchOptions}.\n * @param {boolean} [options.includeExtensions] Toggles sending `extensions`\n *   fields to the GraphQL server. Defaults to `false`.\n * @returns A [terminating Apollo Link](https://www.apollographql.com/docs/react/api/link/introduction/#the-terminating-link).\n * @example\n * A basic Apollo Client setup:\n *\n * ```js\n * import { ApolloClient, InMemoryCache } from \"@apollo/client\";\n * import createUploadLink from \"apollo-upload-client/createUploadLink.mjs\";\n *\n * const client = new ApolloClient({\n *   cache: new InMemoryCache(),\n *   link: createUploadLink(),\n * });\n * ```\n */\nexport default function createUploadLink({\n  uri: fetchUri = \"/graphql\",\n  useGETForQueries,\n  isExtractableFile: customIsExtractableFile = isExtractableFile,\n  FormData: CustomFormData,\n  formDataAppendFile: customFormDataAppendFile = formDataAppendFile,\n  print = defaultPrinter,\n  fetch: customFetch,\n  fetchOptions,\n  credentials,\n  headers,\n  includeExtensions\n} = {}) {\n  const linkConfig = {\n    http: {\n      includeExtensions\n    },\n    options: fetchOptions,\n    credentials,\n    headers\n  };\n  return new ApolloLink(operation => {\n    const context =\n    /**\n     * @type {import(\"@apollo/client/core/types.js\").DefaultContext & {\n     *   clientAwareness?: {\n     *     name?: string,\n     *     version?: string,\n     *   },\n     * }}\n     */\n    operation.getContext();\n    const {\n      // Apollo Studio client awareness `name` and `version` can be configured\n      // via `ApolloClient` constructor options:\n      // https://www.apollographql.com/docs/graphos/metrics/client-awareness/#setup\n      clientAwareness: {\n        name,\n        version\n      } = {},\n      headers\n    } = context;\n    const contextConfig = {\n      http: context.http,\n      options: context.fetchOptions,\n      credentials: context.credentials,\n      headers: {\n        // Client awareness headers can be overridden by context `headers`.\n        ...(name && {\n          \"apollographql-client-name\": name\n        }),\n        ...(version && {\n          \"apollographql-client-version\": version\n        }),\n        ...headers\n      }\n    };\n    const {\n      options,\n      body\n    } = selectHttpOptionsAndBodyInternal(operation, print, fallbackHttpConfig, linkConfig, contextConfig);\n    const {\n      clone,\n      files\n    } = extractFiles(body, customIsExtractableFile, \"\");\n    let uri = selectURI(operation, fetchUri);\n    if (files.size) {\n      if (options.headers)\n        // Automatically set by `fetch` when the `body` is a `FormData` instance.\n        delete options.headers[\"content-type\"];\n\n      // GraphQL multipart request spec:\n      // https://github.com/jaydenseric/graphql-multipart-request-spec\n\n      const RuntimeFormData = CustomFormData || FormData;\n      const form = new RuntimeFormData();\n      form.append(\"operations\", serializeFetchParameter(clone, \"Payload\"));\n\n      /** @type {{ [key: string]: Array<string> }} */\n      const map = {};\n      let i = 0;\n      files.forEach(paths => {\n        map[++i] = paths;\n      });\n      form.append(\"map\", JSON.stringify(map));\n      i = 0;\n      files.forEach((_paths, file) => {\n        customFormDataAppendFile(form, String(++i), file);\n      });\n      options.body = form;\n    } else {\n      if (useGETForQueries &&\n      // If the operation contains some mutations GET shouldn’t be used.\n      !operation.query.definitions.some(definition => definition.kind === \"OperationDefinition\" && definition.operation === \"mutation\")) options.method = \"GET\";\n      if (options.method === \"GET\") {\n        const {\n          newURI,\n          parseError\n        } = rewriteURIForGET(uri, body);\n        if (parseError)\n          // Apollo’s `HttpLink` uses `fromError` for this, but it’s not\n          // exported from `@apollo/client/link/http`.\n          return new Observable(observer => {\n            observer.error(parseError);\n          });\n        uri = newURI;\n      } else options.body = serializeFetchParameter(clone, \"Payload\");\n    }\n    const {\n      controller\n    } = createSignalIfSupported();\n    if (typeof controller !== \"boolean\") {\n      if (options.signal)\n        // Respect the user configured abort controller signal.\n        options.signal.aborted ?\n        // Signal already aborted, so immediately abort.\n        controller.abort() :\n        // Signal not already aborted, so setup a listener to abort when it\n        // does.\n        options.signal.addEventListener(\"abort\", () => {\n          controller.abort();\n        }, {\n          // Prevent a memory leak if the user configured abort controller\n          // is long lasting, or controls multiple things.\n          once: true\n        });\n      options.signal = controller.signal;\n    }\n    const runtimeFetch = customFetch || fetch;\n    return new Observable(observer => {\n      /**\n       * Is the observable being cleaned up.\n       * @type {boolean}\n       */\n      let cleaningUp;\n      runtimeFetch(uri, options).then(response => {\n        // Forward the response on the context.\n        operation.setContext({\n          response\n        });\n        return response;\n      }).then(parseAndCheckHttpResponse(operation)).then(result => {\n        observer.next(result);\n        observer.complete();\n      }).catch(error => {\n        // If the observable is being cleaned up, there is no need to call\n        // next or error because there are no more subscribers. An error after\n        // cleanup begins is likely from the cleanup function aborting the\n        // fetch.\n        if (!cleaningUp) {\n          // For errors such as an invalid fetch URI there will be no GraphQL\n          // result with errors or data to forward.\n          if (error.result && error.result.errors && error.result.data) observer.next(error.result);\n          observer.error(error);\n        }\n      });\n\n      // Cleanup function.\n      return () => {\n        cleaningUp = true;\n\n        // Abort fetch. It’s ok to signal an abort even when not fetching.\n        if (typeof controller !== \"boolean\") controller.abort();\n      };\n    });\n  });\n}\n\n/**\n * Checks if a value is an extractable file.\n * @template [ExtractableFile=any] Extractable file.\n * @callback ExtractableFileMatcher\n * @param {unknown} value Value to check.\n * @returns {value is ExtractableFile} Is the value an extractable file.\n * @example\n * How to check for the default exactable files, as well as a custom type of\n * file:\n *\n * ```js\n * import isExtractableFile from \"apollo-upload-client/isExtractableFile.mjs\";\n *\n * const isExtractableFileEnhanced = (value) =>\n *   isExtractableFile(value) ||\n *   (typeof CustomFile !== \"undefined\" && value instanceof CustomFile);\n * ```\n */\n\n/**\n * Appends a file extracted from the GraphQL operation to the\n * [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData)\n * instance used as the\n * [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch)\n * `options.body` for the\n * [GraphQL multipart request](https://github.com/jaydenseric/graphql-multipart-request-spec).\n * @template [ExtractableFile=any] Extractable file.\n * @callback FormDataFileAppender\n * @param {FormData} formData\n *   [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData)\n *   instance to append the specified file to.\n * @param {string} fieldName Form data field name to append the file with.\n * @param {ExtractableFile} file File to append. The file type depends on what\n *   the extractable file matcher extracts.\n */","map":{"version":3,"names":["ApolloLink","createSignalIfSupported","parseAndCheckHttpResponse","rewriteURIForGET","defaultPrinter","fallbackHttpConfig","selectHttpOptionsAndBodyInternal","selectURI","serializeFetchParameter","Observable","extractFiles","formDataAppendFile","isExtractableFile","createUploadLink","uri","fetchUri","useGETForQueries","customIsExtractableFile","FormData","CustomFormData","customFormDataAppendFile","print","fetch","customFetch","fetchOptions","credentials","headers","includeExtensions","linkConfig","http","options","operation","context","getContext","clientAwareness","name","version","contextConfig","body","clone","files","size","RuntimeFormData","form","append","map","i","forEach","paths","JSON","stringify","_paths","file","String","query","definitions","some","definition","kind","method","newURI","parseError","observer","error","controller","signal","aborted","abort","addEventListener","once","runtimeFetch","cleaningUp","then","response","setContext","result","next","complete","catch","errors","data"],"sources":["/Users/peluche/Documents/NoursStuffs/CerisePeyi/dev/2k24/last/vendure-one-click-deploy/node_modules/apollo-upload-client/createUploadLink.mjs"],"sourcesContent":["// @ts-check\n\nimport { ApolloLink } from \"@apollo/client/link/core/ApolloLink.js\";\nimport { createSignalIfSupported } from \"@apollo/client/link/http/createSignalIfSupported.js\";\nimport { parseAndCheckHttpResponse } from \"@apollo/client/link/http/parseAndCheckHttpResponse.js\";\nimport { rewriteURIForGET } from \"@apollo/client/link/http/rewriteURIForGET.js\";\nimport {\n  defaultPrinter,\n  fallbackHttpConfig,\n  selectHttpOptionsAndBodyInternal,\n} from \"@apollo/client/link/http/selectHttpOptionsAndBody.js\";\nimport { selectURI } from \"@apollo/client/link/http/selectURI.js\";\nimport { serializeFetchParameter } from \"@apollo/client/link/http/serializeFetchParameter.js\";\nimport { Observable } from \"@apollo/client/utilities/observables/Observable.js\";\nimport extractFiles from \"extract-files/extractFiles.mjs\";\n\nimport formDataAppendFile from \"./formDataAppendFile.mjs\";\nimport isExtractableFile from \"./isExtractableFile.mjs\";\n\n/**\n * Creates a\n * [terminating Apollo Link](https://www.apollographql.com/docs/react/api/link/introduction/#the-terminating-link)\n * for [Apollo Client](https://www.apollographql.com/docs/react) that fetches a\n * [GraphQL multipart request](https://github.com/jaydenseric/graphql-multipart-request-spec)\n * if the GraphQL variables contain files (by default\n * [`FileList`](https://developer.mozilla.org/en-US/docs/Web/API/FileList),\n * [`File`](https://developer.mozilla.org/en-US/docs/Web/API/File), or\n * [`Blob`](https://developer.mozilla.org/en-US/docs/Web/API/Blob) instances),\n * or else fetches a regular\n * [GraphQL POST or GET request](https://www.apollographql.com/docs/apollo-server/workflow/requests)\n * (depending on the config and GraphQL operation).\n *\n * Some of the options are similar to the\n * [`createHttpLink` options](https://www.apollographql.com/docs/react/api/link/apollo-link-http/#httplink-constructor-options).\n * @see [GraphQL multipart request spec](https://github.com/jaydenseric/graphql-multipart-request-spec).\n * @param {object} options Options.\n * @param {Parameters<typeof selectURI>[1]} [options.uri] GraphQL endpoint URI.\n *   Defaults to `\"/graphql\"`.\n * @param {boolean} [options.useGETForQueries] Should GET be used to fetch\n *   queries, if there are no files to upload.\n * @param {ExtractableFileMatcher} [options.isExtractableFile] Matches\n *   extractable files in the GraphQL operation. Defaults to\n *   {@linkcode isExtractableFile}.\n * @param {typeof FormData} [options.FormData]\n *   [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData)\n *   class. Defaults to the {@linkcode FormData} global.\n * @param {FormDataFileAppender} [options.formDataAppendFile]\n *   Customizes how extracted files are appended to the\n *   [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData)\n *   instance. Defaults to {@linkcode formDataAppendFile}.\n * @param {import(\"@apollo/client/link/http/selectHttpOptionsAndBody.js\").Printer} [options.print]\n *   Prints the GraphQL query or mutation AST to a string for transport.\n *   Defaults to {@linkcode defaultPrinter}.\n * @param {typeof fetch} [options.fetch] [`fetch`](https://fetch.spec.whatwg.org)\n *   implementation. Defaults to the {@linkcode fetch} global.\n * @param {RequestInit} [options.fetchOptions] `fetch` options; overridden by\n *   upload requirements.\n * @param {string} [options.credentials] Overrides\n *   {@linkcode RequestInit.credentials credentials} in\n *   {@linkcode fetchOptions}.\n * @param {{ [headerName: string]: string }} [options.headers] Merges with and\n *   overrides {@linkcode RequestInit.headers headers} in\n *   {@linkcode fetchOptions}.\n * @param {boolean} [options.includeExtensions] Toggles sending `extensions`\n *   fields to the GraphQL server. Defaults to `false`.\n * @returns A [terminating Apollo Link](https://www.apollographql.com/docs/react/api/link/introduction/#the-terminating-link).\n * @example\n * A basic Apollo Client setup:\n *\n * ```js\n * import { ApolloClient, InMemoryCache } from \"@apollo/client\";\n * import createUploadLink from \"apollo-upload-client/createUploadLink.mjs\";\n *\n * const client = new ApolloClient({\n *   cache: new InMemoryCache(),\n *   link: createUploadLink(),\n * });\n * ```\n */\nexport default function createUploadLink({\n  uri: fetchUri = \"/graphql\",\n  useGETForQueries,\n  isExtractableFile: customIsExtractableFile = isExtractableFile,\n  FormData: CustomFormData,\n  formDataAppendFile: customFormDataAppendFile = formDataAppendFile,\n  print = defaultPrinter,\n  fetch: customFetch,\n  fetchOptions,\n  credentials,\n  headers,\n  includeExtensions,\n} = {}) {\n  const linkConfig = {\n    http: { includeExtensions },\n    options: fetchOptions,\n    credentials,\n    headers,\n  };\n\n  return new ApolloLink((operation) => {\n    const context =\n      /**\n       * @type {import(\"@apollo/client/core/types.js\").DefaultContext & {\n       *   clientAwareness?: {\n       *     name?: string,\n       *     version?: string,\n       *   },\n       * }}\n       */\n      (operation.getContext());\n    const {\n      // Apollo Studio client awareness `name` and `version` can be configured\n      // via `ApolloClient` constructor options:\n      // https://www.apollographql.com/docs/graphos/metrics/client-awareness/#setup\n      clientAwareness: { name, version } = {},\n      headers,\n    } = context;\n\n    const contextConfig = {\n      http: context.http,\n      options: context.fetchOptions,\n      credentials: context.credentials,\n      headers: {\n        // Client awareness headers can be overridden by context `headers`.\n        ...(name && { \"apollographql-client-name\": name }),\n        ...(version && { \"apollographql-client-version\": version }),\n        ...headers,\n      },\n    };\n\n    const { options, body } = selectHttpOptionsAndBodyInternal(\n      operation,\n      print,\n      fallbackHttpConfig,\n      linkConfig,\n      contextConfig,\n    );\n\n    const { clone, files } = extractFiles(body, customIsExtractableFile, \"\");\n\n    let uri = selectURI(operation, fetchUri);\n\n    if (files.size) {\n      if (options.headers)\n        // Automatically set by `fetch` when the `body` is a `FormData` instance.\n        delete options.headers[\"content-type\"];\n\n      // GraphQL multipart request spec:\n      // https://github.com/jaydenseric/graphql-multipart-request-spec\n\n      const RuntimeFormData = CustomFormData || FormData;\n\n      const form = new RuntimeFormData();\n\n      form.append(\"operations\", serializeFetchParameter(clone, \"Payload\"));\n\n      /** @type {{ [key: string]: Array<string> }} */\n      const map = {};\n\n      let i = 0;\n      files.forEach((paths) => {\n        map[++i] = paths;\n      });\n      form.append(\"map\", JSON.stringify(map));\n\n      i = 0;\n      files.forEach((_paths, file) => {\n        customFormDataAppendFile(form, String(++i), file);\n      });\n\n      options.body = form;\n    } else {\n      if (\n        useGETForQueries &&\n        // If the operation contains some mutations GET shouldn’t be used.\n        !operation.query.definitions.some(\n          (definition) =>\n            definition.kind === \"OperationDefinition\" &&\n            definition.operation === \"mutation\",\n        )\n      )\n        options.method = \"GET\";\n\n      if (options.method === \"GET\") {\n        const { newURI, parseError } = rewriteURIForGET(uri, body);\n        if (parseError)\n          // Apollo’s `HttpLink` uses `fromError` for this, but it’s not\n          // exported from `@apollo/client/link/http`.\n          return new Observable((observer) => {\n            observer.error(parseError);\n          });\n        uri = newURI;\n      } else options.body = serializeFetchParameter(clone, \"Payload\");\n    }\n\n    const { controller } = createSignalIfSupported();\n\n    if (typeof controller !== \"boolean\") {\n      if (options.signal)\n        // Respect the user configured abort controller signal.\n        options.signal.aborted\n          ? // Signal already aborted, so immediately abort.\n            controller.abort()\n          : // Signal not already aborted, so setup a listener to abort when it\n            // does.\n            options.signal.addEventListener(\n              \"abort\",\n              () => {\n                controller.abort();\n              },\n              {\n                // Prevent a memory leak if the user configured abort controller\n                // is long lasting, or controls multiple things.\n                once: true,\n              },\n            );\n\n      options.signal = controller.signal;\n    }\n\n    const runtimeFetch = customFetch || fetch;\n\n    return new Observable((observer) => {\n      /**\n       * Is the observable being cleaned up.\n       * @type {boolean}\n       */\n      let cleaningUp;\n\n      runtimeFetch(uri, options)\n        .then((response) => {\n          // Forward the response on the context.\n          operation.setContext({ response });\n          return response;\n        })\n        .then(parseAndCheckHttpResponse(operation))\n        .then((result) => {\n          observer.next(result);\n          observer.complete();\n        })\n        .catch((error) => {\n          // If the observable is being cleaned up, there is no need to call\n          // next or error because there are no more subscribers. An error after\n          // cleanup begins is likely from the cleanup function aborting the\n          // fetch.\n          if (!cleaningUp) {\n            // For errors such as an invalid fetch URI there will be no GraphQL\n            // result with errors or data to forward.\n            if (error.result && error.result.errors && error.result.data)\n              observer.next(error.result);\n\n            observer.error(error);\n          }\n        });\n\n      // Cleanup function.\n      return () => {\n        cleaningUp = true;\n\n        // Abort fetch. It’s ok to signal an abort even when not fetching.\n        if (typeof controller !== \"boolean\") controller.abort();\n      };\n    });\n  });\n}\n\n/**\n * Checks if a value is an extractable file.\n * @template [ExtractableFile=any] Extractable file.\n * @callback ExtractableFileMatcher\n * @param {unknown} value Value to check.\n * @returns {value is ExtractableFile} Is the value an extractable file.\n * @example\n * How to check for the default exactable files, as well as a custom type of\n * file:\n *\n * ```js\n * import isExtractableFile from \"apollo-upload-client/isExtractableFile.mjs\";\n *\n * const isExtractableFileEnhanced = (value) =>\n *   isExtractableFile(value) ||\n *   (typeof CustomFile !== \"undefined\" && value instanceof CustomFile);\n * ```\n */\n\n/**\n * Appends a file extracted from the GraphQL operation to the\n * [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData)\n * instance used as the\n * [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch)\n * `options.body` for the\n * [GraphQL multipart request](https://github.com/jaydenseric/graphql-multipart-request-spec).\n * @template [ExtractableFile=any] Extractable file.\n * @callback FormDataFileAppender\n * @param {FormData} formData\n *   [`FormData`](https://developer.mozilla.org/en-US/docs/Web/API/FormData)\n *   instance to append the specified file to.\n * @param {string} fieldName Form data field name to append the file with.\n * @param {ExtractableFile} file File to append. The file type depends on what\n *   the extractable file matcher extracts.\n */\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}