{"ast":null,"code":"import { Schema } from 'prosemirror-model';\nconst pDOM = [\"p\", 0],\n  blockquoteDOM = [\"blockquote\", 0],\n  hrDOM = [\"hr\"],\n  preDOM = [\"pre\", [\"code\", 0]],\n  brDOM = [\"br\"];\n/**\n[Specs](https://prosemirror.net/docs/ref/#model.NodeSpec) for the nodes defined in this schema.\n*/\nconst nodes = {\n  /**\n  NodeSpec The top level document node.\n  */\n  doc: {\n    content: \"block+\"\n  },\n  /**\n  A plain paragraph textblock. Represented in the DOM\n  as a `<p>` element.\n  */\n  paragraph: {\n    content: \"inline*\",\n    group: \"block\",\n    parseDOM: [{\n      tag: \"p\"\n    }],\n    toDOM() {\n      return pDOM;\n    }\n  },\n  /**\n  A blockquote (`<blockquote>`) wrapping one or more blocks.\n  */\n  blockquote: {\n    content: \"block+\",\n    group: \"block\",\n    defining: true,\n    parseDOM: [{\n      tag: \"blockquote\"\n    }],\n    toDOM() {\n      return blockquoteDOM;\n    }\n  },\n  /**\n  A horizontal rule (`<hr>`).\n  */\n  horizontal_rule: {\n    group: \"block\",\n    parseDOM: [{\n      tag: \"hr\"\n    }],\n    toDOM() {\n      return hrDOM;\n    }\n  },\n  /**\n  A heading textblock, with a `level` attribute that\n  should hold the number 1 to 6. Parsed and serialized as `<h1>` to\n  `<h6>` elements.\n  */\n  heading: {\n    attrs: {\n      level: {\n        default: 1,\n        validate: \"number\"\n      }\n    },\n    content: \"inline*\",\n    group: \"block\",\n    defining: true,\n    parseDOM: [{\n      tag: \"h1\",\n      attrs: {\n        level: 1\n      }\n    }, {\n      tag: \"h2\",\n      attrs: {\n        level: 2\n      }\n    }, {\n      tag: \"h3\",\n      attrs: {\n        level: 3\n      }\n    }, {\n      tag: \"h4\",\n      attrs: {\n        level: 4\n      }\n    }, {\n      tag: \"h5\",\n      attrs: {\n        level: 5\n      }\n    }, {\n      tag: \"h6\",\n      attrs: {\n        level: 6\n      }\n    }],\n    toDOM(node) {\n      return [\"h\" + node.attrs.level, 0];\n    }\n  },\n  /**\n  A code listing. Disallows marks or non-text inline\n  nodes by default. Represented as a `<pre>` element with a\n  `<code>` element inside of it.\n  */\n  code_block: {\n    content: \"text*\",\n    marks: \"\",\n    group: \"block\",\n    code: true,\n    defining: true,\n    parseDOM: [{\n      tag: \"pre\",\n      preserveWhitespace: \"full\"\n    }],\n    toDOM() {\n      return preDOM;\n    }\n  },\n  /**\n  The text node.\n  */\n  text: {\n    group: \"inline\"\n  },\n  /**\n  An inline image (`<img>`) node. Supports `src`,\n  `alt`, and `href` attributes. The latter two default to the empty\n  string.\n  */\n  image: {\n    inline: true,\n    attrs: {\n      src: {\n        validate: \"string\"\n      },\n      alt: {\n        default: null,\n        validate: \"string|null\"\n      },\n      title: {\n        default: null,\n        validate: \"string|null\"\n      }\n    },\n    group: \"inline\",\n    draggable: true,\n    parseDOM: [{\n      tag: \"img[src]\",\n      getAttrs(dom) {\n        return {\n          src: dom.getAttribute(\"src\"),\n          title: dom.getAttribute(\"title\"),\n          alt: dom.getAttribute(\"alt\")\n        };\n      }\n    }],\n    toDOM(node) {\n      let {\n        src,\n        alt,\n        title\n      } = node.attrs;\n      return [\"img\", {\n        src,\n        alt,\n        title\n      }];\n    }\n  },\n  /**\n  A hard line break, represented in the DOM as `<br>`.\n  */\n  hard_break: {\n    inline: true,\n    group: \"inline\",\n    selectable: false,\n    parseDOM: [{\n      tag: \"br\"\n    }],\n    toDOM() {\n      return brDOM;\n    }\n  }\n};\nconst emDOM = [\"em\", 0],\n  strongDOM = [\"strong\", 0],\n  codeDOM = [\"code\", 0];\n/**\n[Specs](https://prosemirror.net/docs/ref/#model.MarkSpec) for the marks in the schema.\n*/\nconst marks = {\n  /**\n  A link. Has `href` and `title` attributes. `title`\n  defaults to the empty string. Rendered and parsed as an `<a>`\n  element.\n  */\n  link: {\n    attrs: {\n      href: {\n        validate: \"string\"\n      },\n      title: {\n        default: null,\n        validate: \"string|null\"\n      }\n    },\n    inclusive: false,\n    parseDOM: [{\n      tag: \"a[href]\",\n      getAttrs(dom) {\n        return {\n          href: dom.getAttribute(\"href\"),\n          title: dom.getAttribute(\"title\")\n        };\n      }\n    }],\n    toDOM(node) {\n      let {\n        href,\n        title\n      } = node.attrs;\n      return [\"a\", {\n        href,\n        title\n      }, 0];\n    }\n  },\n  /**\n  An emphasis mark. Rendered as an `<em>` element. Has parse rules\n  that also match `<i>` and `font-style: italic`.\n  */\n  em: {\n    parseDOM: [{\n      tag: \"i\"\n    }, {\n      tag: \"em\"\n    }, {\n      style: \"font-style=italic\"\n    }, {\n      style: \"font-style=normal\",\n      clearMark: m => m.type.name == \"em\"\n    }],\n    toDOM() {\n      return emDOM;\n    }\n  },\n  /**\n  A strong mark. Rendered as `<strong>`, parse rules also match\n  `<b>` and `font-weight: bold`.\n  */\n  strong: {\n    parseDOM: [{\n      tag: \"strong\"\n    },\n    // This works around a Google Docs misbehavior where\n    // pasted content will be inexplicably wrapped in `<b>`\n    // tags with a font-weight normal.\n    {\n      tag: \"b\",\n      getAttrs: node => node.style.fontWeight != \"normal\" && null\n    }, {\n      style: \"font-weight=400\",\n      clearMark: m => m.type.name == \"strong\"\n    }, {\n      style: \"font-weight\",\n      getAttrs: value => /^(bold(er)?|[5-9]\\d{2,})$/.test(value) && null\n    }],\n    toDOM() {\n      return strongDOM;\n    }\n  },\n  /**\n  Code font mark. Represented as a `<code>` element.\n  */\n  code: {\n    parseDOM: [{\n      tag: \"code\"\n    }],\n    toDOM() {\n      return codeDOM;\n    }\n  }\n};\n/**\nThis schema roughly corresponds to the document schema used by\n[CommonMark](http://commonmark.org/), minus the list elements,\nwhich are defined in the [`prosemirror-schema-list`](https://prosemirror.net/docs/ref/#schema-list)\nmodule.\n\nTo reuse elements from this schema, extend or read from its\n`spec.nodes` and `spec.marks` [properties](https://prosemirror.net/docs/ref/#model.Schema.spec).\n*/\nconst schema = new Schema({\n  nodes,\n  marks\n});\nexport { marks, nodes, schema };","map":{"version":3,"names":["Schema","pDOM","blockquoteDOM","hrDOM","preDOM","brDOM","nodes","doc","content","paragraph","group","parseDOM","tag","toDOM","blockquote","defining","horizontal_rule","heading","attrs","level","default","validate","node","code_block","marks","code","preserveWhitespace","text","image","inline","src","alt","title","draggable","getAttrs","dom","getAttribute","hard_break","selectable","emDOM","strongDOM","codeDOM","link","href","inclusive","em","style","clearMark","m","type","name","strong","fontWeight","value","test","schema"],"sources":["/Users/peluche/Documents/NoursStuffs/CerisePeyi/dev/2k24/last/vendure-one-click-deploy/node_modules/prosemirror-schema-basic/dist/index.js"],"sourcesContent":["import { Schema } from 'prosemirror-model';\n\nconst pDOM = [\"p\", 0], blockquoteDOM = [\"blockquote\", 0], hrDOM = [\"hr\"], preDOM = [\"pre\", [\"code\", 0]], brDOM = [\"br\"];\n/**\n[Specs](https://prosemirror.net/docs/ref/#model.NodeSpec) for the nodes defined in this schema.\n*/\nconst nodes = {\n    /**\n    NodeSpec The top level document node.\n    */\n    doc: {\n        content: \"block+\"\n    },\n    /**\n    A plain paragraph textblock. Represented in the DOM\n    as a `<p>` element.\n    */\n    paragraph: {\n        content: \"inline*\",\n        group: \"block\",\n        parseDOM: [{ tag: \"p\" }],\n        toDOM() { return pDOM; }\n    },\n    /**\n    A blockquote (`<blockquote>`) wrapping one or more blocks.\n    */\n    blockquote: {\n        content: \"block+\",\n        group: \"block\",\n        defining: true,\n        parseDOM: [{ tag: \"blockquote\" }],\n        toDOM() { return blockquoteDOM; }\n    },\n    /**\n    A horizontal rule (`<hr>`).\n    */\n    horizontal_rule: {\n        group: \"block\",\n        parseDOM: [{ tag: \"hr\" }],\n        toDOM() { return hrDOM; }\n    },\n    /**\n    A heading textblock, with a `level` attribute that\n    should hold the number 1 to 6. Parsed and serialized as `<h1>` to\n    `<h6>` elements.\n    */\n    heading: {\n        attrs: { level: { default: 1, validate: \"number\" } },\n        content: \"inline*\",\n        group: \"block\",\n        defining: true,\n        parseDOM: [{ tag: \"h1\", attrs: { level: 1 } },\n            { tag: \"h2\", attrs: { level: 2 } },\n            { tag: \"h3\", attrs: { level: 3 } },\n            { tag: \"h4\", attrs: { level: 4 } },\n            { tag: \"h5\", attrs: { level: 5 } },\n            { tag: \"h6\", attrs: { level: 6 } }],\n        toDOM(node) { return [\"h\" + node.attrs.level, 0]; }\n    },\n    /**\n    A code listing. Disallows marks or non-text inline\n    nodes by default. Represented as a `<pre>` element with a\n    `<code>` element inside of it.\n    */\n    code_block: {\n        content: \"text*\",\n        marks: \"\",\n        group: \"block\",\n        code: true,\n        defining: true,\n        parseDOM: [{ tag: \"pre\", preserveWhitespace: \"full\" }],\n        toDOM() { return preDOM; }\n    },\n    /**\n    The text node.\n    */\n    text: {\n        group: \"inline\"\n    },\n    /**\n    An inline image (`<img>`) node. Supports `src`,\n    `alt`, and `href` attributes. The latter two default to the empty\n    string.\n    */\n    image: {\n        inline: true,\n        attrs: {\n            src: { validate: \"string\" },\n            alt: { default: null, validate: \"string|null\" },\n            title: { default: null, validate: \"string|null\" }\n        },\n        group: \"inline\",\n        draggable: true,\n        parseDOM: [{ tag: \"img[src]\", getAttrs(dom) {\n                    return {\n                        src: dom.getAttribute(\"src\"),\n                        title: dom.getAttribute(\"title\"),\n                        alt: dom.getAttribute(\"alt\")\n                    };\n                } }],\n        toDOM(node) { let { src, alt, title } = node.attrs; return [\"img\", { src, alt, title }]; }\n    },\n    /**\n    A hard line break, represented in the DOM as `<br>`.\n    */\n    hard_break: {\n        inline: true,\n        group: \"inline\",\n        selectable: false,\n        parseDOM: [{ tag: \"br\" }],\n        toDOM() { return brDOM; }\n    }\n};\nconst emDOM = [\"em\", 0], strongDOM = [\"strong\", 0], codeDOM = [\"code\", 0];\n/**\n[Specs](https://prosemirror.net/docs/ref/#model.MarkSpec) for the marks in the schema.\n*/\nconst marks = {\n    /**\n    A link. Has `href` and `title` attributes. `title`\n    defaults to the empty string. Rendered and parsed as an `<a>`\n    element.\n    */\n    link: {\n        attrs: {\n            href: { validate: \"string\" },\n            title: { default: null, validate: \"string|null\" }\n        },\n        inclusive: false,\n        parseDOM: [{ tag: \"a[href]\", getAttrs(dom) {\n                    return { href: dom.getAttribute(\"href\"), title: dom.getAttribute(\"title\") };\n                } }],\n        toDOM(node) { let { href, title } = node.attrs; return [\"a\", { href, title }, 0]; }\n    },\n    /**\n    An emphasis mark. Rendered as an `<em>` element. Has parse rules\n    that also match `<i>` and `font-style: italic`.\n    */\n    em: {\n        parseDOM: [\n            { tag: \"i\" }, { tag: \"em\" },\n            { style: \"font-style=italic\" },\n            { style: \"font-style=normal\", clearMark: m => m.type.name == \"em\" }\n        ],\n        toDOM() { return emDOM; }\n    },\n    /**\n    A strong mark. Rendered as `<strong>`, parse rules also match\n    `<b>` and `font-weight: bold`.\n    */\n    strong: {\n        parseDOM: [\n            { tag: \"strong\" },\n            // This works around a Google Docs misbehavior where\n            // pasted content will be inexplicably wrapped in `<b>`\n            // tags with a font-weight normal.\n            { tag: \"b\", getAttrs: (node) => node.style.fontWeight != \"normal\" && null },\n            { style: \"font-weight=400\", clearMark: m => m.type.name == \"strong\" },\n            { style: \"font-weight\", getAttrs: (value) => /^(bold(er)?|[5-9]\\d{2,})$/.test(value) && null },\n        ],\n        toDOM() { return strongDOM; }\n    },\n    /**\n    Code font mark. Represented as a `<code>` element.\n    */\n    code: {\n        parseDOM: [{ tag: \"code\" }],\n        toDOM() { return codeDOM; }\n    }\n};\n/**\nThis schema roughly corresponds to the document schema used by\n[CommonMark](http://commonmark.org/), minus the list elements,\nwhich are defined in the [`prosemirror-schema-list`](https://prosemirror.net/docs/ref/#schema-list)\nmodule.\n\nTo reuse elements from this schema, extend or read from its\n`spec.nodes` and `spec.marks` [properties](https://prosemirror.net/docs/ref/#model.Schema.spec).\n*/\nconst schema = new Schema({ nodes, marks });\n\nexport { marks, nodes, schema };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}